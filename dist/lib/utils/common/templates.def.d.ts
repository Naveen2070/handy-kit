export declare const TEMPLATES: {
    readonly help: {
        readonly main: "Usage: handy-kit <group> <command> [options]\n\nGroups:\n  license     Manage open-source licenses\n  git         Git utilities\n  scaffold    Scaffold repeatable structures\n  deps        Dependency related commands\n  code        Code analysis related commands\n\nCommands:\n  handy-kit license gen <type> --author \"Name\"   Generate an open-source license (Supported: MIT, Apache-2.0, BSD-3-Clause, GPL-3.0, MPL-2.0, Unlicense)\n  handy-kit git standup [--days <n>] [--weeks <n>] [--months <n>] [--years <n>] [--author <name>] [--branch <branch>] [--export <path>]\n  handy-kit git stats [--since <date>] [--author <name>] [--daily|weekly|monthly] [--metric <commits|added|deleted>] [--export <md|json|txt>]\n  handy-kit scaffold dir [--entry <folder>] [--template <name>] [--schema <path>]\n  handy-kit deps size [--verbose | -v] [--tree | -t] [--table | -t] [--depth | -d] [--concurrency | -c] [--export | -e]\n  handy-kit deps manage [--standard | --upgrade | --minor | --major] [--dry-run]\n  handy-kit code unused [--path | -p] [--exports | -e] [--files | -f] [--help | -h]\n  ";
        readonly license: "Manage open-source licenses\n\nSubcommands:\n  gen <type> --author \"Name\"   Generate an open-source license\n  credits --output <file>      Generate a credits file with all used libraries and their licenses\n\nExamples:\n  handy-kit license gen MIT --author \"Alice\"\n  handy-kit license gen Apache-2.0 --author \"Bob\"\n  handy-kit license credits --output \"credits.md\"\n\nSupported licenses:\n  MIT, Apache-2.0, BSD-3-Clause, GPL-3.0, MPL-2.0, Unlicense";
        readonly "license-gen": "Generate an open-source license\n\nUsage:\n  handy-kit license gen <type> --author \"Name\"\n\nSupported licenses:\n  MIT, Apache-2.0, BSD-3-Clause, GPL-3.0, MPL-2.0, Unlicense\n\nOptions:\n  --author <name>   The author of the project\n  --output <file>   The path to write the license file to\n  --force           Overwrite the output file if it already exists\n    ";
        readonly "license-credits": "Generate a credits file with all used libraries and their licenses\n\nUsage:\n  handy-kit license credits --output <file>\n\nOptions:\n  --output <file>   The path to write the credits file to (default: \"credits.md\")\n    ";
        readonly git: "Git utilities\n\nSubcommands:\n  standup [options]   Show git commits from the last n days/weeks/months/years\n  stats [options]    Show git status from the last n days/weeks/months\n  review [options]   Show git review\n  blame [options]    Lightweight blame summary of who touched which files most\n\nUsage:\n  handy-kit git standup --days <n>\n  handy-kit git stats [--since <date>] [--author <name>] [--daily|weekly|monthly] [--metric <commits|added|deleted>] [--export <md|json|txt>]\n  handy-kit git review [--export | -e <path>] [--format json] [--timestamp] [--summary] [--no-emoji] [--help | -h]\n  handy-kit git blame [--top <N>] [--file <file>] [--json] [--min <n>] [--brief]  [--summary] [--export <path>] [--help | -h]\n  ";
        readonly "git-standup": "Show git commits from the last n days/weeks/months/years\n\nUsage:\n  handy-kit git standup --days <n>\n\nOptions:\n  --days <n>      Number of days to look back\n  --weeks <n>     Number of weeks to look back\n  --months <n>    Number of months to look back\n  --years <n>     Number of years to look back\n  --author <name> Filter commits by author\n  --branch <name> Filter commits by branch\n  --export <path> Export commits to a file\n    ";
        readonly "git-stats": "Show git stats from the last n days/weeks/months\n\nUsage:\n  handy-kit git stats [--since <date>] [--author <name>] [--daily|weekly|monthly] [--metric <commits|added|deleted>] [--export <md|json|txt>]\n\nOptions:\n  --since <date>   Filter commits by date\n  --author <name>  Filter commits by author\n  --daily          Show commits for the last day\n  --weekly         Show commits for the last week\n  --monthly        Show commits for the last month\n  --metric <commits|added|deleted>  Show graph for commits, added lines or deleted lines\n  --export <format>  Export commits to a file(supported: md, json, txt)\n    ";
        readonly "git-review": "Show git review (like a pre-PR summary)\n\nUsage:\n  handy-kit git review [--export | -e <path>] [--format json] [--timestamp] [--summary] [--no-emoji] [--help | -h]\n\nOptions:\n  --export <path>  Export review to a file\n  --format json    Format review as json\n  --timestamp      Show timestamp in review\n  --summary        Show summary in review\n  --no-emoji       Don't use emoji in review\n  --help           Show this help message\n    ";
        readonly "git-blame": "Lightweight blame summary of who touched which files most\n\nUsage:\n  handy-kit git blame [--top <N>] [--file <file>] [--json] [--min <n>] [--brief] [--summary] [--export <path>] [--help | -h]\n\nOptions:\n  --top <N>      Show top N contributors (default: 1)\n  --file <file>  Show blame summary for a specific file\n  --json         Output blame summary as json\n  --min <n>      Show only contributors with at least n lines (default: 0)\n  --brief        Show per file blame summary for a specific file\n  --summary      Show summary of contributions across all files\n  --export <path>  Export blame summary to a file\n  --help         Show this help message\n    ";
        readonly scaffold: "Scaffold repeatable structures\n\nSubcommands:\n  dir [--entry <folder>] [--template <name>] [--schema <path>]   Create a directory structure\n\nUsage:\n  handy-kit scaffold dir [--entry <folder>] [--template <name>] [--schema <path>]";
        readonly "scaffold-dir": "Create a directory structure\n\nUsage:\n  handy-kit scaffold dir [--entry <folder>] [--template <name>] [--schema <path>]\n\nOptions:\n  --entry <folder>   The folder to create the directory structure in (default: \".\")\n  --template <name>  The name of the template to use (default: \"default\")\n  --schema <path>      The path to write the directory structure to (default: \"scaffold\")\n    ";
        readonly deps: "Dependency related commands\n\nSubcommands:\n  size [--verbose | -v] [--tree | -t] [--table | -t] [--depth | -d] [--concurrency | -c] [--export | -e]   Show dependency sizes\n  manage [--standard | --upgrade | --minor | --major] [--dry-run]   Manage dependency versions\n  outdated [--json | -j] [--major-only | -m] [--export <file>] [--help | -h]   Show outdated dependencies\n  audit [--json | -j] [--summary | -s] [--export <file>]   Show security vulnerabilities\n\nUsage:\n  handy-kit deps size [--verbose | -v] [--tree | -t] [--table | -t] [--depth | -d] [--concurrency | -c] [--export | -e]\n  handy-kit deps manage [--standard | --upgrade | --minor | --major] [--dry-run]\n  handy-kit deps outdated [--json | -j] [--major-only | -m] [--export <file>] [--help | -h]\n  handy-kit deps audit [--json | -j] [--summary | -s] [--export <file>]\n  ";
        readonly "deps-size": "Show dependency sizes\n\nUsage:\n  handy-kit deps size [--verbose | -v] [--tree | -t] [--table | -t] [--depth | -d] [--concurrency | -c] [--export | -e]\n\nOptions:\n  --verbose | -v   Show all dependencies\n  --tree | -t      Show dependency tree\n  --table | -t     Show dependency table\n  --depth | -d     search depth level (default: 3)\n  --concurrency | -c     concurrent file reads (default: 10)\n  --export | -e     Export dependency sizes to a file\n    ";
        readonly "deps-manage": "Manage dependency versions\n\nUsage:\n  handy-kit deps manage [--standard | --upgrade | --minor | --major] [--dry-run]\n\nOptions:\n  --standard | --upgrade | --minor | --major   Manage dependency versions\n  --dry-run   Preview changes without making them\n    ";
        readonly "deps-outdated": "Show outdated dependencies\n\nUsage:\n  handy-kit deps outdated [--json | -j] [--major-only | -m] [--export <file>] [--help | -h]\nOptions:\n  --json | -j     Output the results in JSON format\n  --major-only | -m   Only show dependencies with major version updates\n  --export <file> | -e   Export the results to a specified file\n  --help | -h   Show this help message\n    ";
        readonly "deps-audit": "Show security vulnerabilities\n\nUsage:\n  handy-kit deps audit [--json | -j] [--summary | -s] [--export <file>]\n\nOptions:\n  --json | -j     Output the results in JSON format\n  --summary | -s   Show summary of vulnerabilities\n  --export <file> | -e   Export the results to a specified file\n    ";
        readonly code: "Code related commands\n\nSubcommands:\n  unused [--path | -p] [--exports | -e] [--files | -f] [--help | -h]  Show unused exports and files\n\nUsage:\n  handy-kit code unused [--path | -p] [--exports | -e] [--files | -f] [--help | -h]\n  ";
        readonly "code-unused": "Show unused exports and files\n\nUsage:\n  handy-kit code unused [--path | -p] [--exports | -e] [--files | -f] [--help | -h]\n\nOptions:\n  --path | -p     The path to search for unused exports and files\n  --export | -e   Export unused exports and files to a file\n  --files | -f    Show unused files\n  --help | -h     Show this help message\n    ";
    };
    readonly errors: {
        readonly unknownCommand: "❌ Unknown command: '{{command}}'\n\nUsage: handy-kit <group> <command> [options] (Use 'handy-kit <group> help' for more information)";
        readonly unknownGroup: "❌ Unknown group: '{{group}}'\n\nAvailable groups:\n  license, git (Use 'handy-kit help' for more information)";
        readonly missingLicenseArgs: "❌ Missing required arguments for 'license gen': <type> --author <name>";
        readonly unsupportedLicense: "❌ License type '{{type}}' not supported.\nSupported types: MIT, Apache-2.0, BSD-3-Clause, GPL-3.0, MPL-2.0, Unlicense";
        readonly missingGitArgs: "❌ Missing required arguments for 'git standup'. Use --days, --weeks, --months, or --years";
        readonly invalidDays: "❌ Invalid argument: --days/--weeks/--months/--years must be a positive integer";
        readonly noCommits: "ℹ️ No commits found in the given time range";
        readonly notAGitRepo: "❌ Not a git repository or unable to fetch logs.";
        readonly unknownError: "❌ An error occurred: {{error}}";
    };
    readonly success: {
        readonly licenseGen: "✅ License '{{type}}' successfully generated by {{author}}.\n License saved to '{{outputPath}}'";
        readonly gitStandup: "✅ Showing git commits for the given time range.";
        readonly licenseCreated: "✅ License file {{type}} created successfully by {{author}} at {{outputPath}}";
        readonly licenseReplaced: "♻️ License file replaced successfully at {{outputPath}}";
        readonly gitStandupNoCommits: "ℹ️ No commits found in the given time range.";
        readonly gitStats: "✅ Showing git stats since {{since}}.";
    };
};
export type Templates = typeof TEMPLATES;
//# sourceMappingURL=templates.def.d.ts.map